def versionTag = null
pipeline {
    agent none
    
    environment {
        imageName = "tmaxcloudck/stonelb"
    }

    stages {
        stage('Prepare') {
            agent {
                label 'container'
            }
            steps {
                script {
                    versionTag = sh(returnStdout: true, script: "git tag --contains").trim()
                }
            }
        }

        stage('Test') {
            agent {
                label 'container'
            }
            steps {
                sh 'golangci-lint run'
                sh 'go vet ./...'
                sh 'go test -cover ./...'
            }
        }

        stage('Build Image') {
            when {
                allOf{
                    expression {
                        env.GIT_BRANCH == 'origin/master'
                    }
                    expression {
                        return versionTag
                    }
                }
            }
            agent {
                kubernetes {
                    yaml '''
apiVersion: v1
kind: Pod
metadata:
  name: kaniko
  namespace: jenkins
spec:
  containers:
  - name: kaniko
    image: gcr.io/kaniko-project/executor:debug
    command:
    - sleep
    args:
    - 9999999
    env:
      - name: GIT_TOKEN
        valueFrom:
          secretKeyRef:
            name: github-token
            key: GIT_TOKEN
    volumeMounts:
    - name: docker-config
      mountPath: "/kaniko/.docker"
  restartPolicy: Never
  volumes:
  - name: docker-config
    secret:
      secretName: docker-regcred
      items:
        - key: .dockerconfigjson
          path: config.json
                    '''
                }
            }
            steps {
                sh '/kaniko/executor --dockerfile=./build/package/Dockerfile \
                --context=git://github.com/onemankim/Jenkins-test.git#refs/heads/master \
                --destination=${imageName}:${version}'
                }
            }
        }
    }
}